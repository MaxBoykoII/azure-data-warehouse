{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "azdwudacitydev"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"DivvyDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DivvyDB'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/IngestDivvyBikeShareData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IngestRidersTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestRidersTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivvyDB": {},
									"AzureBlobStorage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "IngestPaymentTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "IngestRidersTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestPaymentTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivvyDB": {},
									"AzureBlobStorage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "IngestStationTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "IngestPaymentTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestStationTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivvyDB": {},
									"AzureBlobStorage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "IngestTripTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "IngestStationTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IngestTripTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivvyDB": {},
									"AzureBlobStorage": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/IngestRidersTable')]",
				"[concat(variables('workspaceId'), '/dataflows/IngestPaymentTable')]",
				"[concat(variables('workspaceId'), '/dataflows/IngestStationTable')]",
				"[concat(variables('workspaceId'), '/dataflows/IngestTripTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StageDivvyBikeShareData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "StageRiderData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "rider_id",
											"type": "String"
										},
										"sink": {
											"name": "rider_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "first",
											"type": "String"
										},
										"sink": {
											"name": "first",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "last",
											"type": "String"
										},
										"sink": {
											"name": "last",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String"
										},
										"sink": {
											"name": "address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "birthday",
											"type": "String"
										},
										"sink": {
											"name": "birthday",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "account_start_date",
											"type": "String"
										},
										"sink": {
											"name": "account_start_date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "account_end_date",
											"type": "String"
										},
										"sink": {
											"name": "account_end_date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "is_member",
											"type": "String"
										},
										"sink": {
											"name": "is_member",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Riders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "staging_rider",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Riders')]",
				"[concat(variables('workspaceId'), '/datasets/staging_rider')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Riders')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "rider",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\r\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "rider_id",
						"type": "String"
					},
					{
						"name": "first",
						"type": "String"
					},
					{
						"name": "last",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "birthday",
						"type": "String"
					},
					{
						"name": "account_start_date",
						"type": "String"
					},
					{
						"name": "account_end_date",
						"type": "String"
					},
					{
						"name": "is_member",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/staging_rider')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "riders"
				},
				"sqlPool": {
					"referenceName": "bikesharepool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/bikesharepool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DivvyDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('DivvyDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestPaymentTable')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DivvyDB",
								"type": "LinkedServiceReference"
							},
							"name": "DivvyDB"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AzureBlobStorage"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          payment_id as integer,",
						"          date as date,",
						"          amount as double,",
						"          rider_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'payment',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DivvyDB",
						"DivvyDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     folderPath: 'payment',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AzureBlobStorage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DivvyDB')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestRidersTable')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DivvyDB",
								"type": "LinkedServiceReference"
							},
							"name": "DivvyDB"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AzureBlobStorage"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          rider_id as integer,",
						"          first as string,",
						"          last as string,",
						"          address as string,",
						"          birthday as date,",
						"          account_start_date as date,",
						"          account_end_date as date,",
						"          is_member as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'rider',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DivvyDB",
						"DivvyDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     folderPath: 'rider',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> AzureBlobStorage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DivvyDB')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestStationTable')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DivvyDB",
								"type": "LinkedServiceReference"
							},
							"name": "DivvyDB"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AzureBlobStorage"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          station_id as string,",
						"          name as string,",
						"          latitude as double,",
						"          longitude as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'station',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DivvyDB",
						"DivvyDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     folderPath: 'station',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AzureBlobStorage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DivvyDB')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestTripTable')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DivvyDB",
								"type": "LinkedServiceReference"
							},
							"name": "DivvyDB"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AzureBlobStorage"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          trip_id as string,",
						"          rideable_type as string,",
						"          start_at as timestamp,",
						"          ended_at as timestamp,",
						"          start_station_id as string,",
						"          end_station_id as string,",
						"          rider_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'trip',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DivvyDB",
						"DivvyDB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     folderPath: 'trip',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AzureBlobStorage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DivvyDB')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT 1",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bikesharepool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}